<template>
  <div :style="isiphoneBt ? 'padding-bottom: 30px;' : ''">
      <div class="topItem">基础信息</div>
      <div class="userInfo">
          <div class="uni-flex info_item">
            <div class="left font_color_666">姓名<span class=" font_color_red">*</span></div>
            <input type="text" placeholder="请输入您的姓名" v-model="name">
          </div>
          <div class="uni-flex info_item">
            <div class="left font_color_666">电话<span class=" font_color_red">*</span></div>
            <input type="number" placeholder="请输入您的电话号码" v-model="phone">
          </div>
          <div class="uni-flex info_item">
            <div class="left font_color_666">验证码<span class=" font_color_red">*</span></div>
            <input type="number" v-model="checkCode">
            <button class="codeBtn" @click="getcheckCode" :disabled="codeStatus.status">{{codeStatus.text}}</button>
          </div>
          <div class="uni-flex info_item">
            <div class="left font_color_666">身份证<span class=" font_color_red">*</span></div>
            <input type="idcard" placeholder="请输入您的身份证" v-model="idCard">
          </div>
          <div class="uni-flex info_item">
            <div class="left font_color_666">邀请码<span class=" font_color_red">*</span></div>
            <input type="text" placeholder="请输入您的邀请码" v-model="inviteCode">
          </div>
          <div class="uni-flex info_item">
            <div class="left font_color_666">单位</div>
            <input type="text" placeholder="请输入您所在单位" v-model="company">
          </div>
          <div class="uni-flex info_item">
            <div class="left font_color_666">部门</div>
            <input type="text" placeholder="请输入您所在部门" v-model="team">
          </div>
      </div>
      <div class="submit bg_common" @click="submit">提交</div>
  </div>
</template>

<script>
export default {
    data(){
        return{
            name:'',
            phone:'',
            checkCode:'',
            idCard:'',
            inviteCode:'',
            company:'',
            team:'',
            codeStatus:{ status: false, text: "点击获取验证码" },// 验证码发送状态
            coundownCount:0, // 计时器
            isiphoneBt:false
        }
    },
    onLoad(options){
        this.inviteCode = options.code
    },
    mounted() {
        let _model_ = uni.getStorageSync('_model_');
        if(_model_.indexOf('iPhone X') != -1 || _model_.indexOf('iPhone XR') != -1 || _model_.indexOf('iPhone XS') != -1 || _model_.indexOf('iPhone XS Max') != -1 || _model_.indexOf('iPhone 11') != -1 || _model_.indexOf('iPhone 11 Pro') != -1 || _model_.indexOf('iPhone 11 Pro Max') != -1){
            this.isiphoneBt = true;
            this.$emit('update:isiphoneBt', true);
        }
    },
    methods:{
        showToast(title){
            uni.showToast({
                title,
                icon:'none'
            })
        },
        
        // 获取验证码
        getcheckCode(){
            if(!this.isPhone(this.phone)){
                this.showToast('请输入正确的手机号码')
                return
            }
            this.ebigRequest("/login/sendSmsCode",{mobile: this.phone,},true).then((res) => {
                if(res){
                    this.coundownCount = 60;
                    this.codeStatus.status = true;
                    this.cutDown()
                }
            });
            
        },
        // 获取验证码倒计时
        cutDown(){
            if (this.coundownCount == 0) {
                this.coundownCount = 60;
                this.codeStatus.status = false;
                this.codeStatus.text = '重新发送'
                return;
            } else {
                this.coundownCount = this.coundownCount * 1 - 1;
                this.codeStatus.text = `重新发送(${this.coundownCount}s)`
            }
            setTimeout(() => {
                this.cutDown();
            }, 1000); //每1000毫秒执行一次
        },
        IdentityCodeValid(code) { //校验身份证号码
            // 验证身份证号
            let tip, pass;
            let city = {
                11: '北京',
                12: '天津',
                13: '河北',
                14: '山西',
                15: '内蒙古',
                21: '辽宁',
                22: '吉林',
                23: '黑龙江 ',
                31: '上海',
                32: '江苏',
                33: '浙江',
                34: '安徽',
                35: '福建',
                36: '江西',
                37: '山东',
                41: '河南',
                42: '湖北 ',
                43: '湖南',
                44: '广东',
                45: '广西',
                46: '海南',
                50: '重庆',
                51: '四川',
                52: '贵州',
                53: '云南',
                54: '西藏 ',
                61: '陕西',
                62: '甘肃',
                63: '青海',
                64: '宁夏',
                65: '新疆',
                71: '台湾',
                81: '香港',
                82: '澳门',
                91: '国外 '
            };
            if (!code || !/^\d{6}(18|19|20)?\d{2}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d{3}(\d|X)$/i.test(code)) {
                tip = '身份证号格式错误';
                pass = false;
            } else if (!city[code.substr(0, 2)]) {
                tip = '地址编码错误';
                pass = false;
            } else {
                //18位身份证需要验证最后一位校验位
                if (code.length == 18) {
                    code = code.split('');
                    //∑(ai×Wi)(mod 11)
                    //加权因子
                    let factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
                    //校验位
                    let parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2];
                    let sum = 0;
                    let ai = 0;
                    let wi = 0;
                    for (let i = 0; i < 17; i++) {
                        ai = code[i];
                        wi = factor[i];
                        sum += ai * wi;
                    }
                    let last = parity[sum % 11];
                    if (parity[sum % 11] != code[17]) {
                        tip = '校验位错误';
                        pass = false;
                    } else {
                        pass = true;
                    }
                }
            }
            return pass;
        },
        submit(){
            if(!this.name){
                this.showToast('请输入您的真实姓名')
                return
            }
            if(!this.isPhone(this.phone)){
                this.showToast('请输入正确的手机号码')
                return
            }
            if(!this.checkCode){
                this.showToast('请输入验证码')
                return
            }
            if(!this.IdentityCodeValid(this.idCard)){
                this.showToast('请输入正确的身份证号')
                return
            }
            if(!this.inviteCode){
                this.showToast('请输入邀请码')
                return
            }
            let params = {
                name:this.name,
                phone:this.phone,
                verifyCode:this.checkCode,
                idCard:this.idCard,
                inviteCode:this.inviteCode,
                company:this.company,
                department:this.team,
            }
            this.ebigRequest("promoter/create", params, true).then(res => {
                if(res){
                    this.goUrl('waitApproval','integralDistribution','applyDate='+res.applyDate)
                }
            })
            
        }
    }
}
</script>

<style>
page{
    background-color: #fff;
}
.topItem{
    padding: 10rpx;
    border-bottom: 4rpx solid #f2f2f2;
    font-size: 36rpx;
}
.userInfo{
    padding: 0 20rpx 0;
}
.info_item{
    height: 80rpx;
    line-height: 80rpx;
    border-bottom: 2rpx solid #f2f2f2;
    align-items: center;
    padding: 8rpx 0;
}
.info_item input{
    height: 80rpx;
    line-height: 80rpx;
    flex: 1;
}
.left{
    font-size: 30rpx;
    margin-right: 20rpx;
    width: 110rpx;
    text-align: center;
}
.codeBtn{
    border-radius: 30rpx !important;
    border: 2rpx solid #f2f2f2;
    height: 58rpx;
    line-height: 58rpx;
    padding: 0 8rpx;
    font-size: 24rpx;
}
.submit{
    text-align: center;
    height: 80rpx;
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    color: #fff;
    font-size: 34rpx;
    line-height: 80rpx;
}
</style>