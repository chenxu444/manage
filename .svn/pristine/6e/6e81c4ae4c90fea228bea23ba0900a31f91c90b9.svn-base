/**
 * 
 * 文件描述：uniapp 封装函数库
 * created by @whh 2019-10-29 
 */

import Vue from 'vue';

/**
 * @name：发起网络请求函数
 * @param {*} url 链接
 * @param {*} params 参数
 * @param {*} method GET POST 默认GET
 * @param {*} txt 菊花加载提示文字(不超过6个字)
 * @param {*} loading 是否显示菊花加载
 */
export function ebigRequest(url, params, loading, method, txt, showAlert, getAll) {
    return new Promise((resolve, reject) => {
        let header = {};
        let requestMethod;
        let _token = uni.getStorageSync("_token");
        header['authorization'] = _token;
        if(_token != null && _token != 'null' && _token != ''){
            _token = 'authorization=' + _token;
        }
        // #ifdef MP-WEIXIN
        header['Cookie'] = _token;
        // #endif
        if (method == 'get' || method == 'GET') {
            requestMethod = 'GET';
        } else if (method == 'json') {
            requestMethod = 'POST';
            header['content-type'] = 'application/json;';
        } else {
            requestMethod = 'POST';
            header['content-type'] = 'application/x-www-form-urlencoded;';
        }
        if (loading) {
            if (txt == '' || txt == null || txt == undefined) {
                uni.showLoading({
                    title: '努力加载中...',
                    mask: true
                });
            } else {
                uni.showLoading({
                    title: txt,
                    mask: true
                });
            }
        }
        
        uni.request({
            url: Vue.prototype.base + url,
            data: params,
            header: header,
            method: requestMethod,
            dataType: 'json',
            withCredentials: true, // 携带跨域cookie
            success: res => {
                if(res.statusCode != '200'){
                    uni.showToast({
                        title: '网络状态异常，请稍后重试',
                        icon: none,
                    })
                    return;
                }
                let data = res.data;
                if(typeof data == "string"){
                    if (data.substring(0, 1) == '{' && data.substring(data.length - 1, data.length) == '}') {
                        data = JSON.parse(data);
                    }
                }
                if (url == '/login/mobile') {
                    uni.removeStorageSync('_token');
                    uni.setStorageSync("_token", res.data.data != null ? res.data.data.token : '');
                }
                if (!data.success && !showAlert) {
                    if (data.code >= 2000 && data.code <= 2100 && !showAlert) {
                        uni.showModal({
                            title: '温馨提示',
                            content: '登录已失效，请重新登录',
                            showCancel: false,
                            success: res1 => {
                                uni.navigateTo({
                                    url: '/mine/pages/login/login?returnUrl=true'
                                });
                            }
                        });
                        reject(data.errorMsg);
                        return;
                    }
                    if (data.errorMsg != '' && data.errorMsg != null && data.errorMsg != undefined && !showAlert) {
                        data.errorMsg = data.errorMsg.replace('java.lang.RuntimeException: ', '');
                        uni.showModal({
                            title: '温馨提示',
                            content: data.errorMsg,
                            showCancel: false,
                        });
                        reject(data.errorMsg);
                        return;
                    }
                };
                if (data.success) {
                    if(getAll){
                        resolve(data);
                    }else{
                        resolve(data.data);
                    }
                } else if (!showAlert){
                    resolve(data);
                } else {
                    if(getAll){
                        resolve(data);
                    }
                }
            },
            fail: err => {
                uni.showModal({
                    title: '温馨提示',
                    content: err.errMsg,
                    showCancel: false,
                    success: res1 => {
                        reject(err);
                    }
                });
            },
            complete: () => {
                if (loading) {
                    uni.hideLoading();
                }
            }
        });
    });
}

/**
 * @name：发起网络请求函数
 * @param {*} url 链接
 * @param {*} params 参数
 * @param {*} method GET POST 默认GET
 * @param {*} txt 菊花加载提示文字(不超过6个字)
 * @param {*} loading 是否显示菊花加载
 */
 export function doRequest(url, params, loading, method, txt, showAlert, getAll) {
    return new Promise((resolve, reject) => {
        let header = {};
        let requestMethod;
        let _token = uni.getStorageSync("_token");
        header['authorization'] = _token;
        if(_token != null && _token != 'null' && _token != ''){
            _token = 'authorization=' + _token;
        }
        // #ifdef MP-WEIXIN
        header['Cookie'] = _token;
        // #endif
        if (method == 'get' || method == 'GET') {
            requestMethod = 'GET';
        } else if (method == 'json') {
            requestMethod = 'POST';
            header['content-type'] = 'application/json;';
        } else {
            requestMethod = 'POST';
            header['content-type'] = 'application/x-www-form-urlencoded;';
        }
        if (loading) {
            if (txt == '' || txt == null || txt == undefined) {
                uni.showLoading({
                    title: '努力加载中...',
                    mask: true
                });
            } else {
                uni.showLoading({
                    title: txt,
                    mask: true
                });
            }
        }
        //指定接受的返回参数为json
        header['Accept'] = 'application/json';
        
        uni.request({
            url: Vue.prototype.server_base + url,
            data: params,
            header: header,
            method: requestMethod,
            dataType: 'json',
            withCredentials: true, // 携带跨域cookie
            success: (res) => {
                console.log(res.statusCode);
                if(res.statusCode != '200' && res.statusCode != '401'){
                    uni.showToast({
                        title: '网络状态异常，请稍后重试',
                        icon: "none",
                    })
                    return;
                }
                let data = res.data;
                if(typeof data == "string"){
                    if (data.substring(0, 1) == '{' && data.substring(data.length - 1, data.length) == '}') {
                        data = JSON.parse(data);
                    }
                }
                if (url == '/login/mobile') {
                    uni.removeStorageSync('_token');
                    uni.setStorageSync("_token", res.data.data != null ? res.data.data.token : '');
                }
                if (!data.success && !showAlert) {
                    if (data.code >= 2000 && data.code <= 2100 && !showAlert) {
                        uni.showModal({
                            title: '温馨提示',
                            content: '登录已失效，请重新登录',
                            showCancel: false,
                            success: res1 => {
                                uni.navigateTo({
                                    url: '/mine/pages/login/login?returnUrl=true'
                                });
                            }
                        });
                        reject(data.errorMsg);
                        return;
                    }
                    if (data.errorMsg != '' && data.errorMsg != null && data.errorMsg != undefined && !showAlert) {
                        data.errorMsg = data.errorMsg.replace('java.lang.RuntimeException: ', '');
                        uni.showModal({
                            title: '温馨提示',
                            content: data.errorMsg,
                            showCancel: false,
                        });
                        reject(data.errorMsg);
                        return;
                    }
                };
                if (data.success) {
                    if(getAll){
                        resolve(data);
                    }else{
                        resolve(data.data);
                    }
                } else if (!showAlert){
                    resolve(data);
                } else {
                    if(getAll){
                        resolve(data);
                    }
                }
            },
            fail: err => {
                uni.showModal({
                    title: '温馨提示',
                    content: err.errMsg,
                    showCancel: false,
                    success: res1 => {
                        reject(err);
                    }
                });
            },
            complete: () => {
                if (loading) {
                    uni.hideLoading();
                }
            }
        });
    });
}

/**
 * @name：生成uuid
 */
export function uuid() {
    let s = [];
    let hexDigits = '0123456789abcdef';
    for (let i = 0; i < 36; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
    s[8] = s[13] = s[18] = s[23] = "-";

    let uuid = s.join("");
    return uuid;
}

/**
 * @name：腾讯地图初始化
 * @param {*} key 开发者密钥
 */
export function TxMapInit(key) {
    return new Promise(function (resolve, reject) {

        let script = document.createElement("script");
        script.type = "text/javascript";
        script.src = "https://map.qq.com/api/js?v=2.exp&callback=init&key=" + key;
        script.onerror = reject;
        document.head.appendChild(script);

        let script1 = document.createElement("script");
        script1.type = "text/javascript";
        script1.src = "https://3gimg.qq.com/lightmap/components/geolocation/geolocation.min.js";
        script1.onerror = reject;
        document.head.appendChild(script1);

        window.init = function () {
            resolve(qq) //注意这里
        }
    })
}

/**
 * @name: uni路由跳转
 * @param {*} url 
 */
export function goUrl(url, pages, item) {
    let pagePath = '';
    if(pages){
        pagePath = '/' + pages + '/pages/' + url + '/' + url + (item ? '?' + item : '');
    }else{
        pagePath = '/pages/' + url + '/' + url + (item ? '?' + item : '');
    }
    uni.navigateTo({
        url: pagePath
    });
}

/**
 * @name: uni路由重定向
 * @param {*} url 
 */
export function replaceUrl(url, pages, item) {
    let pagePath = '';
    if(pages){
        pagePath = '/' + pages + '/pages/' + url + '/' + url + (item ? '?' + item : '');
    }else{
        pagePath = '/pages/' + url + '/' + url + (item ? '?' + item : '');
    }
    uni.redirectTo({
        url: pagePath
    });
}

/**
 * @name: uni路由关闭所有打开新的页面
 * @param {*} url 
 */
export function resetUrl(url, pages, item) {
    let pagePath = '';
    if(pages){
        pagePath = '/' + pages + '/pages/' + url + '/' + url + (item ? '?' + item : '');
    }else{
        pagePath = '/pages/' + url + '/' + url + (item ? '?' + item : '');
    }
    uni.reLaunch({
        url: pagePath
    });
}

/**
 * @name: 调取摄像头扫码功能
 */
export function ebigScanCode() {
    return new Promise((resolve, reject) => {
        // #ifdef H5
        // TODO
        // #endif
        // #ifndef H5
        uni.scanCode({
            success: res => {
                resolve(res);
            },
            fail: err => {
                uni.showModal({
                    title: '温馨提示',
                    content: err,
                    showCancel: false
                }).then(err => {
                    // on close
                    reject(err);
                });
            }
        })
        // #endif
    });
}

/**BASE64 解密
 * 用于中文等字符转换
 * @param {Object} input
 */
export function decode64(input) {
    var keyStr = "ABCDEFGHIJKLMNOP" +
"QRSTUVWXYZabcdef" +
"ghijklmnopqrstuv" +
"wxyz0123456789+/" +
"=";
    var output = "";
    var chr1, chr2, chr3 = "";
    var enc1, enc2, enc3, enc4 = "";
    var i = 0;
    // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
    var base64test = /[^A-Za-z0-9\+\/\=]/g;
    if (base64test.exec(input)) {
        alert("There were invalid base64 characters in the input text.\n" +
            "Valid base64 characters are A-Z, a-z, 0-9, '+', '/', and '='\n" +
            "Expect errors in decoding.");
    }
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));
        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }
        chr1 = chr2 = chr3 = "";
        enc1 = enc2 = enc3 = enc4 = "";
    } while (i < input.length);
    return unescape(output);
}

/**BASE64 加密
 * 用于中文等字符转换
 * @param {Object} input
 */
export function encode64(input) {
    var keyStr = "ABCDEFGHIJKLMNOP" +
"QRSTUVWXYZabcdef" +
"ghijklmnopqrstuv" +
"wxyz0123456789+/" +
"=";
    input = escape(input);
    var output = "";
    var chr1, chr2, chr3 = "";
    var enc1, enc2, enc3, enc4 = "";
    var i = 0;
    do {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;
        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        }
        else if (isNaN(chr3)) {
            enc4 = 64;
        }
        output = output +
            keyStr.charAt(enc1) +
            keyStr.charAt(enc2) +
            keyStr.charAt(enc3) +
            keyStr.charAt(enc4);
        chr1 = chr2 = chr3 = "";
        enc1 = enc2 = enc3 = enc4 = "";
    } while (i < input.length);
    return output;
}

/** getLocalFilePath
 * 截取图片链接
 * @param {Object} input
 */
export function getLocalFilePath(path) {
    if (path.indexOf('_www') === 0 || path.indexOf('_doc') === 0 || path.indexOf('_documents') === 0 || path.indexOf('_downloads') === 0) {
        return path
    }
    if (path.indexOf('file://') === 0) {
        return path
    }
    if (path.indexOf('/storage/emulated/0/') === 0) {
        return path
    }
    if (path.indexOf('/') === 0) {
        var localFilePath = plus.io.convertAbsoluteFileSystem(path)
        if (localFilePath !== path) {
            return localFilePath
        } else {
            path = path.substr(1)
        }
    }
    return '_www/' + path
}

/** pathToBase64
 * 图片链接转base64
 * @param {Object} input
 */
export function pathToBase64(path) {
    return new Promise(function(resolve, reject) {
        if (typeof window === 'object' && 'document' in window) {
            if (typeof FileReader === 'function') {
                var xhr = new XMLHttpRequest()
                xhr.open('GET', path, true)
                xhr.responseType = 'blob'
                xhr.onload = function() {
                    if (this.status === 200) {
                        let fileReader = new FileReader()
                        fileReader.onload = function(e) {
                            resolve(e.target.result)
                        }
                        fileReader.onerror = reject
                        fileReader.readAsDataURL(this.response)
                    }
                }
                xhr.onerror = reject
                xhr.send()
                return
            }
            var canvas = document.createElement('canvas')
            var c2x = canvas.getContext('2d')
            var img = new Image
            img.onload = function() {
                canvas.width = img.width
                canvas.height = img.height
                c2x.drawImage(img, 0, 0)
                resolve(canvas.toDataURL())
                canvas.height = canvas.width = 0
            }
            img.onerror = reject
            img.src = path
            return
        }
        if (typeof plus === 'object') {
            plus.io.resolveLocalFileSystemURL(getLocalFilePath(path), function(entry) {
                entry.file(function(file) {
                    var fileReader = new plus.io.FileReader()
                    fileReader.onload = function(data) {
                        resolve(data.target.result)
                    }
                    fileReader.onerror = function(error) {
                        reject(error)
                    }
                    fileReader.readAsDataURL(file)
                }, function(error) {
                    reject(error)
                })
            }, function(error) {
                reject(error)
            })
            return
        }
        if (typeof wx === 'object' && wx.canIUse('getFileSystemManager')) {
            wx.getFileSystemManager().readFile({
                filePath: path,
                encoding: 'base64',
                success: function(res) {
                    resolve('data:image/png;base64,' + res.data)
                },
                fail: function(error) {
                    reject(error)
                }
            })
            return
        }
        reject(new Error('not support'))
    })
}

/** base64ToPath
 * base64转图片链接
 * @param {Object} input
 */
export function base64ToPath(base64) {
    return new Promise(function(resolve, reject) {
        if (typeof window === 'object' && 'document' in window) {
            base64 = base64.split(',')
            var type = base64[0].match(/:(.*?);/)[1]
            var str = atob(base64[1])
            var n = str.length
            var array = new Uint8Array(n)
            while (n--) {
                array[n] = str.charCodeAt(n)
            }
            return resolve((window.URL || window.webkitURL).createObjectURL(new Blob([array], { type: type })))
        }
        var extName = base64.match(/data\:\S+\/(\S+);/)
        if (extName) {
            extName = extName[1]
        } else {
            reject(new Error('base64 error'))
        }
        var fileName = Date.now() + '.' + extName
        if (typeof plus === 'object') {
            var bitmap = new plus.nativeObj.Bitmap('bitmap' + Date.now())
            bitmap.loadBase64Data(base64, function() {
                var filePath = '_doc/uniapp_temp/' + fileName
                bitmap.save(filePath, {}, function() {
                    bitmap.clear()
                    resolve(filePath)
                }, function(error) {
                    bitmap.clear()
                    reject(error)
                })
            }, function(error) {
                bitmap.clear()
                reject(error)
            })
            return
        }
        if (typeof wx === 'object' && wx.canIUse('getFileSystemManager')) {
            var filePath = wx.env.USER_DATA_PATH + '/' + fileName
            wx.getFileSystemManager().writeFile({
                filePath: filePath,
                data: base64.replace(/^data:\S+\/\S+;base64,/, ''),
                encoding: 'base64',
                success: function() {
                    resolve(filePath)
                },
                fail: function(error) {
                    reject(error)
                }
            })
            return
        }
        reject(new Error('not support'))
    })
}

// 注册原生返回事件 若为一级页面则退出应用 否则返回上一页
import jbridge from './jbridge.js';
export function checkPrimaryBack() {
    if (window.WebViewJavascriptBridge) {
        doWebViewJavascriptBridge()
    } else {
        document.addEventListener(
            'WebViewJavascriptBridgeReady',
            function () {
                doWebViewJavascriptBridge()
            },
            false
        );
    }
}

function doWebViewJavascriptBridge() {
    let pages = getCurrentPages();
    let page = (pages[pages.length - 1]).route;
    window.WebViewJavascriptBridge.registerHandler("isFirstLevel", (data, responseCallback) => {
        if (page.includes('myCenter') || page.includes('goodsReturn') || page.includes('orderList') || page
            .includes('login')) {
            responseCallback('true');
        } else {
            if (pages.length > 1) {
                uni.navigateBack({
                    delta: 1
                });
                responseCallback('false');
            } else {
                history.go(-1);
                responseCallback('true');
            }
        }
    })
}

/**
 * @name: 判断是否手机号码
 * @param {*} num 
 */
export function isPhone(mobile) {
    var reg = /^[1][0-9]{10}$/;
    return reg.test(mobile);
}

/**
 * @name: 判断是否身份证
 * @param {*} num 
 */
export function isIDcard(idc) {
    const reg = /^(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5])|([7][1])|([8][1-2]))\d{4}(([1][9]\d{2})|([2]\d{3}))(([0][1-9])|([1][0-2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))\d{3}[0-9xX]$/;
    return reg.test(idc);
}

/**
 * @name: 获取系统时间
 */
 export function getSystemDate() {

    let systemDate = new Date();

    // 获取当年  
    let year = systemDate.getFullYear();

    // 获取当月 （月+1是因为js中月份是按0开始的）  
    let month = systemDate.getMonth() + 1;

    // 获取当日  
    let day = systemDate.getDate();

    if (day < 10) { // 如果日小于10，前面拼接0  

        day = '0' + day;
    }

    if (month < 10) { // 如果月小于10，前面拼接0  

        month = '0' + month;
    }
    let hh = systemDate.getHours()
    let mm = systemDate.getMinutes()
    let ss = systemDate.getSeconds()
    return [year, month, day].join('-') + ' ' + (hh>9?hh:'0'+hh) +':'+(mm>9?mm:'0'+mm)+':'+ (ss>9?ss:'0'+ss);
}